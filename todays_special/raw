"""
Self‑contained FastAPI app that lets you:
1) POST an ingredient JSON from your speech→LLM step ("ingest").
2) Open /review to edit items in a clean UI (name, qty, unit, +/- , delete).
3) Click **Update Pantry** to persist current state to disk (data/pantry.json)
   and append an event to data/inventory_log.jsonl.

You can plug this alongside your existing local_2.py. If you already have
an endpoint that returns the parsed items, just call `/api/ingest` with that
payload and redirect the user to `/review`.

Run:
  uvicorn review_ui:app --reload --port 8001

Test ingest (sample):
  curl -X POST http://127.0.0.1:8001/api/ingest \
    -H 'Content-Type: application/json' \
    -d '{"items":[{"name":"Tomatoes","quantity":6,"unit":"pieces"},{"name":"Onions","quantity":3,"unit":"pieces"},{"name":"Rice","quantity":2,"unit":"cups"},{"name":"Chicken Breast","quantity":1.5,"unit":"lbs"},{"name":"Olive Oil","quantity":1,"unit":"bottle"},{"name":"Garlic","quantity":4,"unit":"cloves"}]}'
Then open http://127.0.0.1:8001/review
"""

from __future__ import annotations
import json
import os
import time
from datetime import datetime
from pathlib import Path
from typing import List, Optional

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from pydantic import BaseModel, Field, validator

# ------------------------
# Data models
# ------------------------

class Ingredient(BaseModel):
    name: str = Field(..., description="Human-friendly ingredient name")
    quantity: float = Field(..., description="Numeric quantity; can be fractional")
    unit: Optional[str] = Field(None, description="Unit like pieces, cups, g, ml, lbs")

    @validator("name")
    def clean_name(cls, v: str) -> str:
        v = v.strip()
        if not v:
            raise ValueError("name cannot be empty")
        return v

class IngestPayload(BaseModel):
    items: List[Ingredient]

class PantryState(BaseModel):
    items: List[Ingredient]
    updated_at: float

# ------------------------
# App setup
# ------------------------

app = FastAPI(title="Ingredients Review UI", version="0.1.0")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

DATA_DIR = Path("data")
PANTRY_FILE = DATA_DIR / "pantry.json"
LOG_FILE = DATA_DIR / "inventory_log.jsonl"
DATA_DIR.mkdir(parents=True, exist_ok=True)

# In-memory last batch (so /review can render instantly after /api/ingest)
_LAST_BATCH: List[Ingredient] = []

# ------------------------
# API endpoints
# ------------------------

@app.post("/api/ingest")
async def ingest(payload: IngestPayload):
    global _LAST_BATCH
    _LAST_BATCH = payload.items
    # Log the raw ingest
    event = {
        "ts": datetime.utcnow().isoformat(),
        "type": "ingest",
        "items": [i.dict() for i in payload.items],
    }
    with LOG_FILE.open("a", encoding="utf-8") as f:
        f.write(json.dumps(event) + "\n")
    # After ingest, send user to /review
    return RedirectResponse(url="/review", status_code=303)

@app.get("/api/last_batch")
async def last_batch():
    if not _LAST_BATCH:
        raise HTTPException(404, "No batch ingested yet. POST to /api/ingest first.")
    return {"items": [i.dict() for i in _LAST_BATCH]}

@app.post("/api/update_pantry")
async def update_pantry(state: PantryState):
    # Persist current pantry
    with PANTRY_FILE.open("w", encoding="utf-8") as f:
        json.dump({"items": [i.dict() for i in state.items], "updated_at": state.updated_at}, f, ensure_ascii=False, indent=2)
    # Append log entry
    event = {
        "ts": datetime.utcnow().isoformat(),
        "type": "update_pantry",
        "items": [i.dict() for i in state.items],
    }
    with LOG_FILE.open("a", encoding="utf-8") as f:
        f.write(json.dumps(event) + "\n")
    return {"ok": True}

@app.get("/api/pantry")
async def read_pantry():
    if not PANTRY_FILE.exists():
        return {"items": [], "updated_at": 0}
    data = json.loads(PANTRY_FILE.read_text(encoding="utf-8"))
    return data

# ------------------------
# Review UI
# ------------------------

REVIEW_HTML = """
<!doctype html>
<html lang=\"en\">
<head>
  <meta charset=\"utf-8\"/>
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>
  <title>Review Your Ingredients</title>
  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n  <style>
    :root { --bg:#f8faf9; --card:#ffffff; --muted:#6b7280; --text:#0f172a; --green:#16a34a; --red:#ef4444; --border:#e5e7eb; }
    * { box-sizing: border-box; font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; }
    body { margin:0; background:var(--bg); color:var(--text); }
    .container { max-width: 820px; margin: 28px auto; padding: 0 16px; }
    h1 { margin: 0 0 6px; font-size: 28px; }
    .sub { color: var(--muted); margin-bottom: 16px; }
    .card { background: var(--card); border:1px solid var(--border); border-radius: 14px; padding: 14px 16px; display:flex; align-items:center; gap:12px; }
    .stack { display:flex; flex-direction: column; gap: 14px; }
    .name { flex: 1; }
    .name input { width: 100%; border:1px solid var(--border); border-radius: 10px; padding: 12px 12px; font-size: 15px; }
    .qtybox { display:flex; align-items:center; gap:10px; }
    .qty { min-width: 58px; text-align:center; font-weight: 700; font-size: 18px; }
    .unit { color: var(--muted); font-size: 12px; }
    .btn { border:1px solid var(--border); background:#fff; padding:8px 10px; border-radius:12px; font-weight:600; cursor:pointer; }
    .btn:hover { background:#f3f4f6; }
    .btn.icon { width:36px; height:36px; display:flex; align-items:center; justify-content:center; font-size:18px; }
    .row-left { display:flex; align-items:center; gap:12px; flex: 1; }
    .x { color: var(--red); font-weight:700; }
    .footer { display:flex; gap: 12px; margin: 28px 0; }
    .primary { background: var(--green); color:#fff; border:none; }
    .danger { background: #fff; color: var(--red); border:1px solid #fecaca; }
    .pill { border:1px solid var(--border); border-radius:12px; padding:4px 8px; }
    .unit-input { width: 88px; border:1px solid var(--border); border-radius:10px; padding:8px; }
  </style>
</head>
<body>
  <div class=\"container\">
    <h1>Review Your Ingredients</h1>
    <div class=\"sub\">Edit ingredient names and adjust quantities as needed</div>

    <div id=\"list\" class=\"stack\"></div>

    <div class=\"footer\">
      <button id=\"updateBtn\" class=\"btn primary\">Update Pantry</button>
      <button id=\"discardBtn\" class=\"btn danger\">Discard Changes</button>
      <span id=\"status\" class=\"pill\"></span>
    </div>
  </div>

<script>
  let items = [];
  function fmt(n){ return Number(n).toString(); }

  function render(){
    const mount = document.getElementById('list');
    mount.innerHTML = '';
    items.forEach((it, idx) => {
      const row = document.createElement('div');
      row.className = 'card';

      const del = document.createElement('button');
      del.className = 'btn icon x';
      del.textContent = '×';
      del.onclick = () => { items.splice(idx,1); render(); };

      const nameWrap = document.createElement('div');
      nameWrap.className = 'name';
      const nameInput = document.createElement('input');
      nameInput.value = it.name || '';
      nameInput.oninput = (e)=>{ it.name = e.target.value };
      nameWrap.appendChild(nameInput);

      const qtyBox = document.createElement('div');
      qtyBox.className = 'qtybox';
      const minus = document.createElement('button'); minus.className='btn icon'; minus.textContent='−';
      minus.onclick = ()=>{ it.quantity = Math.max(0, parseFloat(it.quantity||0) - 1); render(); };
      const qty = document.createElement('div'); qty.className='qty'; qty.textContent = fmt(it.quantity ?? 0);
      const plus = document.createElement('button'); plus.className='btn icon'; plus.textContent='+';
      plus.onclick = ()=>{ it.quantity = parseFloat(it.quantity||0) + 1; render(); };
      const unit = document.createElement('input'); unit.className='unit-input'; unit.placeholder='unit'; unit.value = it.unit || '';
      unit.oninput=(e)=>{ it.unit = e.target.value };

      qtyBox.appendChild(minus); qtyBox.appendChild(qty); qtyBox.appendChild(plus);
      const unitSpan = document.createElement('div'); unitSpan.className = 'unit';
      qtyBox.appendChild(unit);

      const left = document.createElement('div');
      left.className = 'row-left';
      left.appendChild(del); left.appendChild(nameWrap);

      row.appendChild(left);
      row.appendChild(qtyBox);
      mount.appendChild(row);
    });
  }

  async function load(){
    try{
      const r = await fetch('/api/last_batch');
      if(!r.ok) throw new Error('No batch to review');
      const data = await r.json();
      items = data.items || [];
    }catch(e){
      // fall back to existing pantry if no batch
      const r2 = await fetch('/api/pantry');
      const data2 = await r2.json();
      items = data2.items || [];
    }
    render();
  }

  document.getElementById('updateBtn').onclick = async () => {
    const payload = { items, updated_at: Date.now()/1000 };
    const r = await fetch('/api/update_pantry', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(payload)});
    const ok = r.ok; const el = document.getElementById('status');
    el.textContent = ok ? 'Saved pantry ✓' : 'Failed to save';
    setTimeout(()=> el.textContent='', 2500);
  };

  document.getElementById('discardBtn').onclick = load;

  load();
</script>
</body>
</html>
"""

@app.get("/review", response_class=HTMLResponse)
async def review_page():
    return HTMLResponse(REVIEW_HTML)


